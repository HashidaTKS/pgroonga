name: Package
on:
  push:
  pull_request:
  schedule:
    - cron: |
        0 0 * * *
jobs:
  linux:
    name: Linux
    strategy:
      fail-fast: false
      matrix:
        package-id:
          - postgresql-13-pgdg-pgroonga-debian-buster
          - postgresql-13-pgdg-pgroonga-ubuntu-bionic
          - postgresql-13-pgdg-pgroonga-ubuntu-focal
          - postgresql-13-pgdg-pgroonga-ubuntu-groovy
          - postgresql-13-pgdg-pgroonga-centos-8
          - postgresql-13-pgdg-pgroonga-centos-7
          - postgresql-12-pgdg-pgroonga-debian-buster
          - postgresql-12-pgdg-pgroonga-ubuntu-bionic
          - postgresql-12-pgdg-pgroonga-ubuntu-focal
          - postgresql-12-pgdg-pgroonga-ubuntu-groovy
          - postgresql-12-pgdg-pgroonga-centos-8
          - postgresql-12-pgdg-pgroonga-centos-7
          - postgresql-12-pgroonga-centos-8
          - postgresql-12-pgroonga-centos-7
          - postgresql-11-pgroonga-debian-buster
          - postgresql-11-pgroonga-debian-buster-i386
          - postgresql-11-pgroonga-centos-7
          - postgresql-10-pgdg-pgroonga-ubuntu-bionic
          - postgresql-10-pgdg-pgroonga-ubuntu-focal
          - postgresql-10-pgdg-pgroonga-centos-7
          - postgresql-10-pgroonga-centos-7
          - postgresql-9.6-pgroonga-centos-7
          - pgroonga-fedora-33
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt -y -V install ruby
          sudo gem install bundler
          bundle install
      - name: Clone dependencies
        run: |
          cd ..
          git clone --depth 1 https://github.com/groonga/groonga.git
          cd groonga
          git submodule update --init --force --recursive --depth 1
      - name: Build archive
        run: |
          rake dist
      - name: Configure
        run: |
          set -eux
          package=$(echo ${{ matrix.package-id }} | \
                      sed -E -e 's/-(debian|ubuntu|centos|fedora).*$//g')
          os=$(echo ${{ matrix.package-id }} | \
                 sed -E -e 's/^.*-((debian|ubuntu|centos|fedora).*)$/\1/g')
          echo "PACKAGE=${package}" >> ${GITHUB_ENV}
          echo "OS=${os}" >> ${GITHUB_ENV}
          case ${os} in
            debian-*|ubuntu-*)
              echo "PACKAGE_TYPE=apt" >> ${GITHUB_ENV}
              ;;
            centos-*|fedora-*)
              echo "PACKAGE_TYPE=yum" >> ${GITHUB_ENV}
              ;;
          esac
          test_docker_image=$(echo ${os} | sed -E -e 's/-/:/g')
          case ${test_docker_image} in
            *:i386)
              test_docker_image="$(echo ${test_docker_image} | \
                                     sed -E -e 's/:i386$//g')"
              test_docker_image="i386/${test_docker_image}"
              ;;
          esac
          echo "TEST_DOCKER_IMAGE=${test_docker_image}" >> ${GITHUB_ENV}
      - name: Build with Docker
        run: |
          set -x
          cd packages/${PACKAGE}
          rake version:update
          rake ${PACKAGE_TYPE}:build ${PACKAGE_TYPE}_TARGETS=${OS}
          mv ${PACKAGE_TYPE}/repositories/ ../../
        env:
          GROONGA_REPOSITORY: ../../../groonga

      # Artifact
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.package-id }}
          path: repositories/

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          tar czf ${{ matrix.package-id }}.tar.gz repositories/
      - name: Ensure creating release
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload to release
        uses: actions/upload-release-asset@v1.0.1
        if: |
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: ${{ matrix.package-id }}.tar.gz
          asset_name: ${{ matrix.package-id }}.tar.gz
          asset_content_type: application/gzip

      # Test
      - name: Test
        run: |
          docker run \
            --rm \
            --tty \
            --volume ${PWD}:/host:ro \
            ${TEST_DOCKER_IMAGE} \
            /pgroonga/packages/${PACKAGE_TYPE}/test.sh
